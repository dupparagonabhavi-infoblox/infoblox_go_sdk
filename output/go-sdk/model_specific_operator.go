/*
A record

creating docu of wapi a record documentation

API version: 2.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SpecificOperator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecificOperator{}

// SpecificOperator Specific operator with 'value' and 'op' fields.
type SpecificOperator struct {
	// The value to filter by.
	Value *string `json:"value,omitempty"`
	// The operator to use for filtering.
	Op *string `json:"op,omitempty"`
}

// NewSpecificOperator instantiates a new SpecificOperator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecificOperator() *SpecificOperator {
	this := SpecificOperator{}
	return &this
}

// NewSpecificOperatorWithDefaults instantiates a new SpecificOperator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecificOperatorWithDefaults() *SpecificOperator {
	this := SpecificOperator{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SpecificOperator) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificOperator) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SpecificOperator) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SpecificOperator) SetValue(v string) {
	o.Value = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *SpecificOperator) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecificOperator) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *SpecificOperator) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *SpecificOperator) SetOp(v string) {
	o.Op = &v
}

func (o SpecificOperator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecificOperator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	return toSerialize, nil
}

type NullableSpecificOperator struct {
	value *SpecificOperator
	isSet bool
}

func (v NullableSpecificOperator) Get() *SpecificOperator {
	return v.value
}

func (v *NullableSpecificOperator) Set(val *SpecificOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecificOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecificOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecificOperator(val *SpecificOperator) *NullableSpecificOperator {
	return &NullableSpecificOperator{value: val, isSet: true}
}

func (v NullableSpecificOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecificOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


