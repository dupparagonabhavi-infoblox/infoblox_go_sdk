/*
A record

creating docu of wapi a record documentation

API version: 2.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiRecordAGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	returnFields *string
	maxResults *int32
	returnFields2 *string
	returnAsObject *int32
	filter *map[string]string
}

// Comma-separated fields to return (e.g., name, ipv4addr)
func (r ApiRecordAGetRequest) ReturnFields(returnFields string) ApiRecordAGetRequest {
	r.returnFields = &returnFields
	return r
}

// Give positive value to indicate records to be truncated
func (r ApiRecordAGetRequest) MaxResults(maxResults int32) ApiRecordAGetRequest {
	r.maxResults = &maxResults
	return r
}

// Returns basic fields as default as well as non-basic fields when mentioned explicitly
func (r ApiRecordAGetRequest) ReturnFields2(returnFields2 string) ApiRecordAGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// If set to 1, returns result as object
func (r ApiRecordAGetRequest) ReturnAsObject(returnAsObject int32) ApiRecordAGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

// Dynamic filter parameters (e.g., comment~, name&#x3D;, status[]).
func (r ApiRecordAGetRequest) Filter(filter map[string]string) ApiRecordAGetRequest {
	r.filter = &filter
	return r
}

func (r ApiRecordAGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordAGetExecute(r)
}

/*
RecordAGet Get A Records

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRecordAGetRequest
*/
func (a *DefaultAPIService) RecordAGet(ctx context.Context) ApiRecordAGetRequest {
	return ApiRecordAGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) RecordAGetExecute(r ApiRecordAGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RecordAGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/record:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnFields2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRecordAObjRefDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	objRef string
}

func (r ApiRecordAObjRefDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordAObjRefDeleteExecute(r)
}

/*
RecordAObjRefDelete king

delete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objRef
 @return ApiRecordAObjRefDeleteRequest
*/
func (a *DefaultAPIService) RecordAObjRefDelete(ctx context.Context, objRef string) ApiRecordAObjRefDeleteRequest {
	return ApiRecordAObjRefDeleteRequest{
		ApiService: a,
		ctx: ctx,
		objRef: objRef,
	}
}

// Execute executes the request
func (a *DefaultAPIService) RecordAObjRefDeleteExecute(r ApiRecordAObjRefDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RecordAObjRefDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/record:a/{obj_ref}"
	localVarPath = strings.Replace(localVarPath, "{"+"obj_ref"+"}", url.PathEscape(parameterValueToString(r.objRef, "objRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRecordAObjRefGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	objRef string
	returnFields *string
	maxResults *int32
	returnFields2 *string
	returnAsObject *int32
}

// Comma-separated fields to return (e.g., name, ipv4addr)
func (r ApiRecordAObjRefGetRequest) ReturnFields(returnFields string) ApiRecordAObjRefGetRequest {
	r.returnFields = &returnFields
	return r
}

// Give positive value to indicate records to be truncated
func (r ApiRecordAObjRefGetRequest) MaxResults(maxResults int32) ApiRecordAObjRefGetRequest {
	r.maxResults = &maxResults
	return r
}

// Returns basic fields as default as well as non-basic fields when mentioned explicitly
func (r ApiRecordAObjRefGetRequest) ReturnFields2(returnFields2 string) ApiRecordAObjRefGetRequest {
	r.returnFields2 = &returnFields2
	return r
}

// If set to 1, returns result as object
func (r ApiRecordAObjRefGetRequest) ReturnAsObject(returnAsObject int32) ApiRecordAObjRefGetRequest {
	r.returnAsObject = &returnAsObject
	return r
}

func (r ApiRecordAObjRefGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordAObjRefGetExecute(r)
}

/*
RecordAObjRefGet hello

hi

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objRef
 @return ApiRecordAObjRefGetRequest
*/
func (a *DefaultAPIService) RecordAObjRefGet(ctx context.Context, objRef string) ApiRecordAObjRefGetRequest {
	return ApiRecordAObjRefGetRequest{
		ApiService: a,
		ctx: ctx,
		objRef: objRef,
	}
}

// Execute executes the request
func (a *DefaultAPIService) RecordAObjRefGetExecute(r ApiRecordAObjRefGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RecordAObjRefGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/record:a/{obj_ref}"
	localVarPath = strings.Replace(localVarPath, "{"+"obj_ref"+"}", url.PathEscape(parameterValueToString(r.objRef, "objRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_max_results", r.maxResults, "form", "")
	}
	if r.returnFields2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields+", r.returnFields2, "form", "")
	}
	if r.returnAsObject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_as_object", r.returnAsObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRecordAObjRefPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	objRef string
	returnFields *string
	method *string
	recordACreateRequest *RecordACreateRequest
}

// Comma-separated fields to return (e.g., name, ipv4addr)
func (r ApiRecordAObjRefPostRequest) ReturnFields(returnFields string) ApiRecordAObjRefPostRequest {
	r.returnFields = &returnFields
	return r
}

// it can be used to override a methods property
func (r ApiRecordAObjRefPostRequest) Method(method string) ApiRecordAObjRefPostRequest {
	r.method = &method
	return r
}

func (r ApiRecordAObjRefPostRequest) RecordACreateRequest(recordACreateRequest RecordACreateRequest) ApiRecordAObjRefPostRequest {
	r.recordACreateRequest = &recordACreateRequest
	return r
}

func (r ApiRecordAObjRefPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordAObjRefPostExecute(r)
}

/*
RecordAObjRefPost king

hello

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objRef
 @return ApiRecordAObjRefPostRequest
*/
func (a *DefaultAPIService) RecordAObjRefPost(ctx context.Context, objRef string) ApiRecordAObjRefPostRequest {
	return ApiRecordAObjRefPostRequest{
		ApiService: a,
		ctx: ctx,
		objRef: objRef,
	}
}

// Execute executes the request
func (a *DefaultAPIService) RecordAObjRefPostExecute(r ApiRecordAObjRefPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RecordAObjRefPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/record:a/{obj_ref}"
	localVarPath = strings.Replace(localVarPath, "{"+"obj_ref"+"}", url.PathEscape(parameterValueToString(r.objRef, "objRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	if r.method != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_method", r.method, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordACreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRecordAObjRefPutRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	objRef string
	returnFields *string
	recordACreateRequest *RecordACreateRequest
}

// Comma-separated fields to return (e.g., name, ipv4addr)
func (r ApiRecordAObjRefPutRequest) ReturnFields(returnFields string) ApiRecordAObjRefPutRequest {
	r.returnFields = &returnFields
	return r
}

func (r ApiRecordAObjRefPutRequest) RecordACreateRequest(recordACreateRequest RecordACreateRequest) ApiRecordAObjRefPutRequest {
	r.recordACreateRequest = &recordACreateRequest
	return r
}

func (r ApiRecordAObjRefPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordAObjRefPutExecute(r)
}

/*
RecordAObjRefPut king

hello

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param objRef
 @return ApiRecordAObjRefPutRequest
*/
func (a *DefaultAPIService) RecordAObjRefPut(ctx context.Context, objRef string) ApiRecordAObjRefPutRequest {
	return ApiRecordAObjRefPutRequest{
		ApiService: a,
		ctx: ctx,
		objRef: objRef,
	}
}

// Execute executes the request
func (a *DefaultAPIService) RecordAObjRefPutExecute(r ApiRecordAObjRefPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RecordAObjRefPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/record:a/{obj_ref}"
	localVarPath = strings.Replace(localVarPath, "{"+"obj_ref"+"}", url.PathEscape(parameterValueToString(r.objRef, "objRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_return_fields", r.returnFields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordACreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRecordAPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	method *string
	recordACreateRequest *RecordACreateRequest
}

// it can be used to override a methods property
func (r ApiRecordAPostRequest) Method(method string) ApiRecordAPostRequest {
	r.method = &method
	return r
}

func (r ApiRecordAPostRequest) RecordACreateRequest(recordACreateRequest RecordACreateRequest) ApiRecordAPostRequest {
	r.recordACreateRequest = &recordACreateRequest
	return r
}

func (r ApiRecordAPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.RecordAPostExecute(r)
}

/*
RecordAPost to create  record

method to create record a

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRecordAPostRequest
*/
func (a *DefaultAPIService) RecordAPost(ctx context.Context) ApiRecordAPostRequest {
	return ApiRecordAPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) RecordAPostExecute(r ApiRecordAPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RecordAPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/record:a"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.method != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "_method", r.method, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.recordACreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRequestPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	requestPostRequestInner *[]RequestPostRequestInner
}

func (r ApiRequestPostRequest) RequestPostRequestInner(requestPostRequestInner []RequestPostRequestInner) ApiRequestPostRequest {
	r.requestPostRequestInner = &requestPostRequestInner
	return r
}

func (r ApiRequestPostRequest) Execute() (*RequestPost200Response, *http.Response, error) {
	return r.ApiService.RequestPostExecute(r)
}

/*
RequestPost Execute a series of network management requests

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRequestPostRequest
*/
func (a *DefaultAPIService) RequestPost(ctx context.Context) ApiRequestPostRequest {
	return ApiRequestPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RequestPost200Response
func (a *DefaultAPIService) RequestPostExecute(r ApiRequestPostRequest) (*RequestPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequestPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RequestPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestPostRequestInner == nil {
		return localVarReturnValue, nil, reportError("requestPostRequestInner is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestPostRequestInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
