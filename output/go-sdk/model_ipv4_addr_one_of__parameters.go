/*
A record

creating docu of wapi a record documentation

API version: 2.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IPv4AddrOneOfParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPv4AddrOneOfParameters{}

// IPv4AddrOneOfParameters struct for IPv4AddrOneOfParameters
type IPv4AddrOneOfParameters struct {
	Exclude []string `json:"exclude,omitempty"`
	Num *int32 `json:"num,omitempty"`
}

// NewIPv4AddrOneOfParameters instantiates a new IPv4AddrOneOfParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPv4AddrOneOfParameters() *IPv4AddrOneOfParameters {
	this := IPv4AddrOneOfParameters{}
	return &this
}

// NewIPv4AddrOneOfParametersWithDefaults instantiates a new IPv4AddrOneOfParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPv4AddrOneOfParametersWithDefaults() *IPv4AddrOneOfParameters {
	this := IPv4AddrOneOfParameters{}
	return &this
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *IPv4AddrOneOfParameters) GetExclude() []string {
	if o == nil || IsNil(o.Exclude) {
		var ret []string
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4AddrOneOfParameters) GetExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *IPv4AddrOneOfParameters) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []string and assigns it to the Exclude field.
func (o *IPv4AddrOneOfParameters) SetExclude(v []string) {
	o.Exclude = v
}

// GetNum returns the Num field value if set, zero value otherwise.
func (o *IPv4AddrOneOfParameters) GetNum() int32 {
	if o == nil || IsNil(o.Num) {
		var ret int32
		return ret
	}
	return *o.Num
}

// GetNumOk returns a tuple with the Num field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4AddrOneOfParameters) GetNumOk() (*int32, bool) {
	if o == nil || IsNil(o.Num) {
		return nil, false
	}
	return o.Num, true
}

// HasNum returns a boolean if a field has been set.
func (o *IPv4AddrOneOfParameters) HasNum() bool {
	if o != nil && !IsNil(o.Num) {
		return true
	}

	return false
}

// SetNum gets a reference to the given int32 and assigns it to the Num field.
func (o *IPv4AddrOneOfParameters) SetNum(v int32) {
	o.Num = &v
}

func (o IPv4AddrOneOfParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPv4AddrOneOfParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Num) {
		toSerialize["num"] = o.Num
	}
	return toSerialize, nil
}

type NullableIPv4AddrOneOfParameters struct {
	value *IPv4AddrOneOfParameters
	isSet bool
}

func (v NullableIPv4AddrOneOfParameters) Get() *IPv4AddrOneOfParameters {
	return v.value
}

func (v *NullableIPv4AddrOneOfParameters) Set(val *IPv4AddrOneOfParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4AddrOneOfParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4AddrOneOfParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4AddrOneOfParameters(val *IPv4AddrOneOfParameters) *NullableIPv4AddrOneOfParameters {
	return &NullableIPv4AddrOneOfParameters{value: val, isSet: true}
}

func (v NullableIPv4AddrOneOfParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4AddrOneOfParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


