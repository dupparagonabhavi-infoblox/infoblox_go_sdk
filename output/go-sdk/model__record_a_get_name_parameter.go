/*
A record

creating docu of wapi a record documentation

API version: 2.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RecordAGetNameParameter - struct for RecordAGetNameParameter
type RecordAGetNameParameter struct {
	SpecificOperator *SpecificOperator
	String *string
}

// SpecificOperatorAsRecordAGetNameParameter is a convenience function that returns SpecificOperator wrapped in RecordAGetNameParameter
func SpecificOperatorAsRecordAGetNameParameter(v *SpecificOperator) RecordAGetNameParameter {
	return RecordAGetNameParameter{
		SpecificOperator: v,
	}
}

// stringAsRecordAGetNameParameter is a convenience function that returns string wrapped in RecordAGetNameParameter
func StringAsRecordAGetNameParameter(v *string) RecordAGetNameParameter {
	return RecordAGetNameParameter{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RecordAGetNameParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpecificOperator
	err = newStrictDecoder(data).Decode(&dst.SpecificOperator)
	if err == nil {
		jsonSpecificOperator, _ := json.Marshal(dst.SpecificOperator)
		if string(jsonSpecificOperator) == "{}" { // empty struct
			dst.SpecificOperator = nil
		} else {
			if err = validator.Validate(dst.SpecificOperator); err != nil {
				dst.SpecificOperator = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpecificOperator = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpecificOperator = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RecordAGetNameParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RecordAGetNameParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RecordAGetNameParameter) MarshalJSON() ([]byte, error) {
	if src.SpecificOperator != nil {
		return json.Marshal(&src.SpecificOperator)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RecordAGetNameParameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpecificOperator != nil {
		return obj.SpecificOperator
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RecordAGetNameParameter) GetActualInstanceValue() (interface{}) {
	if obj.SpecificOperator != nil {
		return *obj.SpecificOperator
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableRecordAGetNameParameter struct {
	value *RecordAGetNameParameter
	isSet bool
}

func (v NullableRecordAGetNameParameter) Get() *RecordAGetNameParameter {
	return v.value
}

func (v *NullableRecordAGetNameParameter) Set(val *RecordAGetNameParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordAGetNameParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordAGetNameParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordAGetNameParameter(val *RecordAGetNameParameter) *NullableRecordAGetNameParameter {
	return &NullableRecordAGetNameParameter{value: val, isSet: true}
}

func (v NullableRecordAGetNameParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordAGetNameParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


