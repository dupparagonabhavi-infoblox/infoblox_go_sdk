/*
A record

creating docu of wapi a record documentation

API version: 2.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IPv4Addr - struct for IPv4Addr
type IPv4Addr struct {
	IPv4AddrOneOf *IPv4AddrOneOf
	String *string
}

// IPv4AddrOneOfAsIPv4Addr is a convenience function that returns IPv4AddrOneOf wrapped in IPv4Addr
func IPv4AddrOneOfAsIPv4Addr(v *IPv4AddrOneOf) IPv4Addr {
	return IPv4Addr{
		IPv4AddrOneOf: v,
	}
}

// stringAsIPv4Addr is a convenience function that returns string wrapped in IPv4Addr
func StringAsIPv4Addr(v *string) IPv4Addr {
	return IPv4Addr{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IPv4Addr) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IPv4AddrOneOf
	err = newStrictDecoder(data).Decode(&dst.IPv4AddrOneOf)
	if err == nil {
		jsonIPv4AddrOneOf, _ := json.Marshal(dst.IPv4AddrOneOf)
		if string(jsonIPv4AddrOneOf) == "{}" { // empty struct
			dst.IPv4AddrOneOf = nil
		} else {
			if err = validator.Validate(dst.IPv4AddrOneOf); err != nil {
				dst.IPv4AddrOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.IPv4AddrOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IPv4AddrOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IPv4Addr)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IPv4Addr)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IPv4Addr) MarshalJSON() ([]byte, error) {
	if src.IPv4AddrOneOf != nil {
		return json.Marshal(&src.IPv4AddrOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IPv4Addr) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IPv4AddrOneOf != nil {
		return obj.IPv4AddrOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IPv4Addr) GetActualInstanceValue() (interface{}) {
	if obj.IPv4AddrOneOf != nil {
		return *obj.IPv4AddrOneOf
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableIPv4Addr struct {
	value *IPv4Addr
	isSet bool
}

func (v NullableIPv4Addr) Get() *IPv4Addr {
	return v.value
}

func (v *NullableIPv4Addr) Set(val *IPv4Addr) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4Addr) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4Addr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4Addr(val *IPv4Addr) *NullableIPv4Addr {
	return &NullableIPv4Addr{value: val, isSet: true}
}

func (v NullableIPv4Addr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4Addr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


